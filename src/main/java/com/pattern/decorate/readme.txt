装饰者模式：
    也叫包装者模式
    为了某个实现类在不修改原始类的基础上进行动态的覆盖或增加方法
    可以采用装饰器模式
    实现类要保持跟原有类的层级关系
    装饰器模式是特殊的适配器模式
     装饰器                                    适配器
     非常特别的适配器                           可以不保留层级关系
     装饰者和被装饰者都要                       通常采用代理或者继承进行包装
     实现同一个接口，主要目的是为了扩展
     保留oop关系
     满足is-a的关系                              满足has-a的关系
     注重覆盖和扩展                              注重兼容和转换
例如；
InputeStream 类就是以抽象组件存在的：而FileInputStream就是具体组件，
它实现了抽象组件的所有接口；FilterInputStream类无疑就是装饰角色，
它实现了InputStream类的所有接口，并且持有InputStream的对象实例的引用


装饰器与适配器都有一个别名叫做 包装模式(Wrapper)，
它们看似都是起到包装一个类或对象的作用，但是使用它们的目的很不一一样。
适配器模式的意义是要将一个接口转变成另一个接口，它的目的是通过改变接口来达到重复使用的目的。
而装饰器模式不是要改变被装饰对象的接口，而是恰恰要保持原有的接口，
但是增强原有对象的功能，或者改变原有对象的处理方式而提升性能。所以这两个模式设计的目的是不同的。